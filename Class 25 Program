import os
import urllib.request
import ssl

from pyspark.sql.functions import length

data_dir = "data"
os.makedirs(data_dir, exist_ok=True)

data_dir1 = "hadoop/bin"
os.makedirs(data_dir1, exist_ok=True)

urls_and_paths = {
    "https://raw.githubusercontent.com/saiadityaus1/SparkCore1/master/test.txt": os.path.join(data_dir, "test.txt"),
    "https://github.com/saiadityaus1/SparkCore1/raw/master/winutils.exe": os.path.join(data_dir1, "winutils.exe"),
    "https://github.com/saiadityaus1/SparkCore1/raw/master/hadoop.dll": os.path.join(data_dir1, "hadoop.dll")
}

# Create an unverified SSL context
ssl_context = ssl._create_unverified_context()

for url, path in urls_and_paths.items():
    # Use the unverified context with urlopen
    with urllib.request.urlopen(url, context=ssl_context) as response, open(path, 'wb') as out_file:
        data = response.read()
        out_file.write(data)
import os, urllib.request, ssl; ssl_context = ssl._create_unverified_context(); [open(path, 'wb').write(urllib.request.urlopen(url, context=ssl_context).read()) for url, path in { "https://github.com/saiadityaus1/test1/raw/main/df.csv": "df.csv", "https://github.com/saiadityaus1/test1/raw/main/df1.csv": "df1.csv", "https://github.com/saiadityaus1/test1/raw/main/dt.txt": "dt.txt", "https://github.com/saiadityaus1/test1/raw/main/file1.txt": "file1.txt", "https://github.com/saiadityaus1/test1/raw/main/file2.txt": "file2.txt", "https://github.com/saiadityaus1/test1/raw/main/file3.txt": "file3.txt", "https://github.com/saiadityaus1/test1/raw/main/file4.json": "file4.json", "https://github.com/saiadityaus1/test1/raw/main/file5.parquet": "file5.parquet", "https://github.com/saiadityaus1/test1/raw/main/file6": "file6", "https://github.com/saiadityaus1/test1/raw/main/prod.csv": "prod.csv", "https://github.com/saiadityaus1/test1/raw/main/state.txt": "state.txt", "https://github.com/saiadityaus1/test1/raw/main/usdata.csv": "usdata.csv"}.items()]

# ======================================================================================

from pyspark import SparkConf, SparkContext
from pyspark.sql import SparkSession
import sys

python_path = sys.executable
os.environ['PYSPARK_PYTHON'] = python_path

os.environ['JAVA_HOME'] = r'C:\Users\JAYANTH\.jdks\corretto-1.8.0_432'

conf = SparkConf().setAppName("pyspark").setMaster("local[*]").set("spark.driver.host","localhost").set("spark.default.parallelism", "1")
sc = SparkContext(conf=conf)

spark = SparkSession.builder.getOrCreate()

spark.read.format("csv").load("data/test.txt").toDF("Success").show(20, False)


##################ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´ðŸ”´ -> DONT TOUCH ABOVE CODE -- TYPE BELOW ####################################

# ============================================class 25============================================
ls=["State->TN~City->Chennai", "State->UP~City->Lucknow"]

rdddrawdata=sc.parallelize(ls)

print("--------raw data-----------")
print(rdddrawdata.collect())

rdddata=rdddrawdata.flatMap(lambda x:x.split("~"))
print("--------flatted map raw data-----------")
print(rdddata.collect())

rddstate=rdddata.filter(lambda x:"State" in x).map(lambda x: x.replace("State->",""))
print(rddstate.collect())

rddcity=rdddata.filter(lambda x:"City" in x).map(lambda x: x.replace("City->",""))
print(rddcity.collect())
rddcity.foreach(print)
rddcity.foreach(lambda x: print(x+" uturn"))


#---------How to read the text format using rdd----------------

#---------use sc.textFile(), to read the textfile and convert to rdd--

##==============================progam 1================================
rdddrawdata=sc.textFile("state.txt")

print("--------raw data-----------")
print(rdddrawdata.collect())

rdddata=rdddrawdata.flatMap(lambda x:x.split(","))
print("--------flatted map raw data-----------")
print(rdddata.collect())

rddstate=rdddata.filter(lambda x:"State" in x).map(lambda x: x.replace("State->",""))
print(rddstate.collect())

rddcity=rdddata.filter(lambda x:"City" in x).map(lambda x: x.replace("City->",""))
print(rddcity.collect())
rddcity.foreach(print)
rddcity.foreach(lambda x: print(x+" uturn"))
##==============================progam 2================================
rawdata2 = sc.textFile("usdata.csv")
print("----------raw data-------------")
rawdata2.foreach(print)

fildata2=rawdata2.filter(lambda x:len(x) >200)
print("----------filter data-------------")
fildata2.foreach(print)

flatdata2 =fildata2.flatMap(lambda x:x.split(","))
print("----------flatted data-------------")
flatdata2.foreach(print)

replacedata2 = flatdata2.map(lambda x:x.replace("-",""))
print("----------replace data-------------")
replacedata2.foreach(print)

concatdata2 = replacedata2.map(lambda x: x+",zeyo")
print("----------replace data-------------")
concatdata2.foreach(print)

##==============================task ================================
taskdata=["bigdata~spark~hadoop~hive"]

rawtaskdata=sc.parallelize(taskdata)
print("--------------raw data----------")
rawtaskdata.foreach(print)
print()

expected=rawtaskdata.flatMap(lambda x:x.split("~")).map(lambda x:x.upper()).map(lambda x: "Tech ->"+x+" Trainer->Sai")
expected.foreach(print)
